/*
Taking IQ's https://www.shadertoy.com/view/Xds3zN and commenting it extensively to make it easier to learn from.
*/

// Created by inigo quilez - iq/2013
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// A list of usefull distance function to simple primitives, and an example on how to 
// do some interesting boolean operations, repetition and displacement.
//
// More info here: http://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm

// Antialiasing: number of samples in x and y dimensions
#define AA 1   // make this 1 if your machine is too slow

//------------------------------------------------------------------
// Distance functions
//
// Each function gives the distance from p to a primitive centered at the origin.
// The position and orientation of the primitive is fixed. To simulate moving
// the primitive, transform p in the opposite way.
//
// The s and u prefixes tell whether the result is signed or unsigned.
// A signed function will return negative values for p inside the primitive;
// an unsigned function will return 0.

// Distance from p to plane (at y = 0)
float $sdPlane( vec3 p )
{
	return p.y;
}

// Distance from p to sphere of radius s (centered at origin)
float $sdSphere( vec3 p, float s )
{
    return length(p)-s;
}

// Distance from p to box whose half-dimensions are b.x, b.y, b.z
float $sdBox( vec3 p, vec3 b )
{
    vec3 d = abs(p) - b;
    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));
}

// Distance from p to ellipsoid the length of whose semi-principal axes is r.x, r.y, r.z
float $sdEllipsoid( in vec3 p, in vec3 r )
{
    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);
}

// Distance from p to box of half-dimensions b.x,y,z plus buffer radius r
float $udRoundBox( vec3 p, vec3 b, float r )
{
    return length(max(abs(p)-b,0.0))-r;
}

// Distance from p to horizontal torus with major radius t.x and minor radius t.y
float $sdTorus( vec3 p, vec2 t )
{
    return length( vec2(length(p.xz)-t.x, p.y)) - t.y;
}

float $sdHexPrism( vec3 p, vec2 h )
{
    vec3 q = abs(p);
#if 0
    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);
#else
    float d1 = q.z-h.y;
    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;
    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);
#endif
}

// Distance from p to cylinder of radius r with spherical ends centered at a and b.
// This is a rare exception to the rule that all primitives are centered at the origin.
float $sdCapsule( vec3 p, vec3 a, vec3 b, float r )
{
	vec3 pa = p-a, ba = b-a;
	float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );
	return length( pa - ba*h ) - r;
}

float $sdTriPrism( vec3 p, vec2 h )
{
    vec3 q = abs(p);
#if 0
    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);
#else
    float d1 = q.z-h.y;
    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;
    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);
#endif
}

// Distance from p to cylinder with radius h.x and half-length h.y.
float $sdCylinder( vec3 p, vec2 h )
{
  vec2 d = abs(vec2(length(p.xz),p.y)) - h;
  return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}

// Distance from p to a cone of height c.z whose vertex is at the origin
// and is pointing up.
float $sdCone( in vec3 p, in vec3 c )
{
    vec2 q = vec2(length(p.xz), p.y );
    float d1 = -q.y - c.z;
    float d2 = max(dot(q,c.xy), q.y);
    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);
}

float $sdConeSection( in vec3 p, in float h, in float r1, in float r2 )
{
    float d1 = -p.y - h;
    float q = p.y - h;
    float si = 0.5*(r1-r2)/h;
    float d2 = max( sqrt( dot(p.xz,p.xz)*(1.0-si*si)) + q*si - r2, q );
    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);
}

float $sdPryamid4(vec3 p, vec3 h ) // h = { cos a, sin a, height }
{
    // Tetrahedron = Octahedron - Cube
    float box = sdBox( p - vec3(0,-2.0*h.z,0), vec3(2.0*h.z) );
 
    float d = 0.0;
    d = max( d, abs( dot(p, vec3( -h.x, h.y, 0 )) ));
    d = max( d, abs( dot(p, vec3(  h.x, h.y, 0 )) ));
    d = max( d, abs( dot(p, vec3(  0, h.y, h.x )) ));
    d = max( d, abs( dot(p, vec3(  0, h.y,-h.x )) ));
    float octa = d - h.z;
    return max(-box,octa); // Subtraction
 }

// Euclidean distance function (same as builtin length(p)?)
float $length2( vec2 p )
{
	return sqrt( p.x*p.x + p.y*p.y );
}

// Non-Euclidean distance function, so the sphere "length6(p) = k" is squarish.
float $length6( vec2 p )
{
	p = p*p*p; p = p*p;
	return pow( p.x + p.y, 1.0/6.0 );
}

// Non-Euclidean distance function, so the sphere "length8(p) = k" is more squarish.
float $length8( vec2 p )
{
	p = p*p; p = p*p; p = p*p;
	return pow( p.x + p.y, 1.0/8.0 );
}

// A torus with a squarish minor cross section, using non-Euclidean distance function.
float $sdTorus82( vec3 p, vec2 t )
{
    vec2 q = vec2($length2(p.xz)-t.x,p.y);
    return $length8(q)-t.y;
}

// A torus with squarish major and minor cross sections, using non-Euclidean distance function.
float $sdTorus88( vec3 p, vec2 t )
{
    vec2 q = vec2($length8(p.xz)-t.x,p.y);
    return $length8(q)-t.y;
}

// a cylinder with squarish horizontal cross-section, with radius h.x and half-length h.y.
float $sdCylinder6( vec3 p, vec2 h )
{
    return max( $length6(p.xz)-h.x, abs(p.y)-h.y );
}

//------------------------------------------------------------------
// CSG operations

// subtract primitive 2 from primitive 1, where d1 is distance to primitive 1.
float $opS( float d1, float d2 )
{
    return max(-d2,d1);
}

// union primitives 1 and 2
// d1 is a vec2 where .x is the distance, and .y is the color/material code.
vec2 $opU( vec2 d1, vec2 d2 )
{
	return (d1.x<d2.x) ? d1 : d2;
}

// intersection of two primitives
float $opI( float d1, float d2 )
{
    return max(d1, d2);
}

// Smooth minimum (polynomial smin())
// See http://www.iquilezles.org/www/articles/smin/smin.htm
float $opBlend( float d1, float d2 ) {
    const float k = 0.1;
    float h = clamp( 0.5+0.5*(d2-d1)/k, 0.0, 1.0 );
    return mix( d2, d1, h ) - k*h*(1.0-h);
}


//------------------------------------------------------------------
// Domain operations

// Repetition over grid with spacing c.x, c.y, c.z
vec3 $opRep( vec3 p, vec3 c )
{
    return mod(p,c)-0.5*c;
}

// Domain deformation: transform the input point p before passing to distance function.

vec3 $opTwist( vec3 p )
{
    float  c = cos(10.0*p.y+10.0);
    float  s = sin(10.0*p.y+10.0);
    mat2   m = mat2(c,-s,s,c);
    return vec3(m*p.xz,p.y);
}

vec3 $opCheapBend( vec3 p )
{
    float c = cos(20.0 * p.y);
    float s = sin(20.0 * p.y);
    mat2  m = mat2(c,-s,s,c);
    return vec3(m*p.xy,p.z);
}